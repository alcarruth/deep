// Generated by CoffeeScript 2.5.1
(function() {
  //!/usr/bin/env coffee

  var copy, jump_table, shade, type,
    indexOf = [].indexOf;

  jump_table = {
    Object: function(x) {
      var k, v, y;
      y = {};
      for (k in x) {
        v = x[k];
        y[k] = copy(v);
      }
      return y;
    },
    Array: function(x) {
      var e, i, len, y;
      y = [];
      for (i = 0, len = x.length; i < len; i++) {
        e = x[i];
        y.push(copy(e));
      }
      return y;
    },
    String: function(x) {
      return x;
    },
    Boolean: function(x) {
      return x;
    },
    Number: function(x) {
      return x;
    },
    null: function(x) {
      return x;
    },
    undefined: function(x) {
      return x;
    }
  };

  type = function(x) {
    if (x === null || x === (void 0)) {
      return x;
    } else {
      return x.constructor.name;
    }
  };

  copy = function(x) {
    var f, key;
    key = type(x);
    f = jump_table[key];
    return f(x);
  };

  shade = function(x, y) {
    var array, e, i, key, len, obj, val, x_type, y_type;
    x_type = type(x);
    y_type = type(y);
    if (x_type !== y_type) {
      if (y_type === void 0) {
        return copy(x);
      }
      if (y_type === null) {
        return null;
      }
    }
    if (x_type === 'Object') {
      obj = {};
      for (key in x) {
        val = x[key];
        if (y[key] === void 0) {
          // key only in x
          obj[key] = copy(val);
        } else {
          // key in both x and y
          obj[key] = shade(val, y[key]);
        }
      }
      for (key in y) {
        val = y[key];
        if (x[key] === void 0) {
          obj[key] = copy(val);
        }
      }
      return obj;
    }
    if (x_type === 'Array') {
      array = copy(x);
      for (i = 0, len = y.length; i < len; i++) {
        e = y[i];
        if (indexOf.call(array, e) < 0) {
          array.push(e);
        }
      }
      return array;
    }
    return copy(y);
  };

  exports.copy = copy;

  exports.shade = shade;

}).call(this);
